// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    user_id,
    name,
    description,
    deadline
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, name, description, deadline, created_at, updated_at
`

type CreateProjectParams struct {
	UserID      pgtype.Int4        `json:"user_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Deadline    pgtype.Timestamptz `json:"deadline"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Deadline,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1 AND user_id = $2
`

type DeleteProjectParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.Exec(ctx, deleteProject, arg.ID, arg.UserID)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, user_id, name, description, deadline, created_at, updated_at FROM projects
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetProjectParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetProject(ctx context.Context, arg GetProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, arg.ID, arg.UserID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectTasks = `-- name: GetProjectTasks :many
SELECT t.id, t.user_id, t.description, t.status, t.priority, t.due_date, t.start_date, t.completed_at, t.project_id, t.recurrence, t.tags, t.notes, t.created_at, t.updated_at FROM tasks t
WHERE t.project_id = $1 AND t.user_id = $2
ORDER BY t.created_at DESC
`

type GetProjectTasksParams struct {
	ProjectID pgtype.Int4 `json:"project_id"`
	UserID    pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetProjectTasks(ctx context.Context, arg GetProjectTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getProjectTasks, arg.ProjectID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT id, user_id, name, description, deadline, created_at, updated_at FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context, userID pgtype.Int4) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTaskFromProject = `-- name: RemoveTaskFromProject :one
UPDATE tasks
SET
    project_id = NULL,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at
`

type RemoveTaskFromProjectParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) RemoveTaskFromProject(ctx context.Context, arg RemoveTaskFromProjectParams) (Task, error) {
	row := q.db.QueryRow(ctx, removeTaskFromProject, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    deadline = COALESCE($5, deadline),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, description, deadline, created_at, updated_at
`

type UpdateProjectParams struct {
	ID          int32              `json:"id"`
	UserID      pgtype.Int4        `json:"user_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Deadline    pgtype.Timestamptz `json:"deadline"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Deadline,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
