// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTaskDependency = `-- name: AddTaskDependency :exec
INSERT INTO task_dependencies (
    task_id,
    depends_on_id
) VALUES (
    $1, $2
)
`

type AddTaskDependencyParams struct {
	TaskID      pgtype.Int4 `json:"task_id"`
	DependsOnID pgtype.Int4 `json:"depends_on_id"`
}

func (q *Queries) AddTaskDependency(ctx context.Context, arg AddTaskDependencyParams) error {
	_, err := q.db.Exec(ctx, addTaskDependency, arg.TaskID, arg.DependsOnID)
	return err
}

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET
    status = 'completed',
    completed_at = NOW(),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at
`

type CompleteTaskParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, completeTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countTasks = `-- name: CountTasks :one
SELECT 
    COUNT(*) AS total_tasks,
    COUNT(CASE WHEN status = 'pending' THEN 1 END) AS pending_tasks,
    COUNT(CASE WHEN status = 'completed' THEN 1 END) AS completed_tasks
FROM 
    tasks
WHERE 
    tasks.user_id = $1
    AND (
        $2::text IS NULL OR status = $2
    )
    AND (
        $3::text[] IS NULL OR tags && $3
    )
    AND (
        $4::timestamp WITH TIME ZONE IS NULL OR due_date <= $4
    )
    AND (
        $5::text IS NULL OR project_id IN (
            SELECT id FROM projects 
            WHERE name = $5 AND user_id = $1
        )
    )
`

type CountTasksParams struct {
	UserID      pgtype.Int4        `json:"user_id"`
	Status      string             `json:"status"`
	Tags        []string           `json:"tags"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	ProjectName string             `json:"project_name"`
}

type CountTasksRow struct {
	TotalTasks     int64 `json:"total_tasks"`
	PendingTasks   int64 `json:"pending_tasks"`
	CompletedTasks int64 `json:"completed_tasks"`
}

func (q *Queries) CountTasks(ctx context.Context, arg CountTasksParams) (CountTasksRow, error) {
	row := q.db.QueryRow(ctx, countTasks,
		arg.UserID,
		arg.Status,
		arg.Tags,
		arg.DueDate,
		arg.ProjectName,
	)
	var i CountTasksRow
	err := row.Scan(&i.TotalTasks, &i.PendingTasks, &i.CompletedTasks)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    user_id,
    description,
    status,
    priority,
    due_date,
    start_date,
    project_id,
    recurrence,
    tags,
    notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at
`

type CreateTaskParams struct {
	UserID      pgtype.Int4        `json:"user_id"`
	Description string             `json:"description"`
	Status      string             `json:"status"`
	Priority    pgtype.Text        `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ProjectID   pgtype.Int4        `json:"project_id"`
	Recurrence  pgtype.Text        `json:"recurrence"`
	Tags        []string           `json:"tags"`
	Notes       pgtype.Text        `json:"notes"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.UserID,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.StartDate,
		arg.ProjectID,
		arg.Recurrence,
		arg.Tags,
		arg.Notes,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    name
) VALUES (
    $1, $2, $3
) RETURNING id, email, password_hash, name, created_at, updated_at
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Name         pgtype.Text `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getDependentTasks = `-- name: GetDependentTasks :many
SELECT t.id, t.user_id, t.description, t.status, t.priority, t.due_date, t.start_date, t.completed_at, t.project_id, t.recurrence, t.tags, t.notes, t.created_at, t.updated_at FROM tasks t
JOIN task_dependencies td ON t.id = td.task_id
WHERE td.depends_on_id = $1 AND t.user_id = $2
ORDER BY t.created_at DESC
`

type GetDependentTasksParams struct {
	DependsOnID pgtype.Int4 `json:"depends_on_id"`
	UserID      pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetDependentTasks(ctx context.Context, arg GetDependentTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getDependentTasks, arg.DependsOnID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentlyCompletedTasks = `-- name: GetRecentlyCompletedTasks :many
SELECT id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at FROM tasks
WHERE user_id = $1
AND status = 'completed'
ORDER BY completed_at DESC
LIMIT $2
`

type GetRecentlyCompletedTasksParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) GetRecentlyCompletedTasks(ctx context.Context, arg GetRecentlyCompletedTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getRecentlyCompletedTasks, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at FROM tasks
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetTaskParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskDependencies = `-- name: GetTaskDependencies :many
SELECT t.id, t.user_id, t.description, t.status, t.priority, t.due_date, t.start_date, t.completed_at, t.project_id, t.recurrence, t.tags, t.notes, t.created_at, t.updated_at FROM tasks t
JOIN task_dependencies td ON t.id = td.depends_on_id
WHERE td.task_id = $1 AND t.user_id = $2
ORDER BY t.created_at DESC
`

type GetTaskDependenciesParams struct {
	TaskID pgtype.Int4 `json:"task_id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetTaskDependencies(ctx context.Context, arg GetTaskDependenciesParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTaskDependencies, arg.TaskID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByTag = `-- name: GetTasksByTag :many
SELECT id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at FROM tasks
WHERE user_id = $1
AND $2 = ANY(tags)
ORDER BY created_at DESC
`

type GetTasksByTagParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Tags   []string    `json:"tags"`
}

func (q *Queries) GetTasksByTag(ctx context.Context, arg GetTasksByTagParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByTag, arg.UserID, arg.Tags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksWithinDateRange = `-- name: GetTasksWithinDateRange :many
SELECT id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at FROM tasks
WHERE user_id = $1
AND (
    (start_date IS NOT NULL AND start_date >= $2 AND start_date <= $3)
    OR (due_date IS NOT NULL AND due_date >= $2 AND due_date <= $3)
)
ORDER BY 
    COALESCE(start_date, due_date) ASC
`

type GetTasksWithinDateRangeParams struct {
	UserID      pgtype.Int4        `json:"user_id"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	StartDate_2 pgtype.Timestamptz `json:"start_date_2"`
}

func (q *Queries) GetTasksWithinDateRange(ctx context.Context, arg GetTasksWithinDateRangeParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksWithinDateRange, arg.UserID, arg.StartDate, arg.StartDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, name, created_at, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT 
    id, 
    user_id,
    description, 
    status, 
    priority, 
    due_date, 
    start_date, 
    completed_at, 
    project_id,
    recurrence,
    tags,
    notes,
    created_at,
    updated_at
FROM 
    tasks
WHERE user_id = $1
AND (
    $2::text IS NULL 
    OR priority = $2
)
AND (
    $3::text IS NULL 
    OR project_id = $3::integer
)
`

type ListTasksParams struct {
	UserID   pgtype.Int4 `json:"user_id"`
	Priority pgtype.Text `json:"priority"`
	Project  pgtype.Text `json:"project"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.UserID, arg.Priority, arg.Project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.StartDate,
			&i.CompletedAt,
			&i.ProjectID,
			&i.Recurrence,
			&i.Tags,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTaskDependency = `-- name: RemoveTaskDependency :exec
DELETE FROM task_dependencies
WHERE task_id = $1 AND depends_on_id = $2
`

type RemoveTaskDependencyParams struct {
	TaskID      pgtype.Int4 `json:"task_id"`
	DependsOnID pgtype.Int4 `json:"depends_on_id"`
}

func (q *Queries) RemoveTaskDependency(ctx context.Context, arg RemoveTaskDependencyParams) error {
	_, err := q.db.Exec(ctx, removeTaskDependency, arg.TaskID, arg.DependsOnID)
	return err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
    description = COALESCE($3, description),
    status = COALESCE($4, status),
    priority = COALESCE($5, priority),
    due_date = COALESCE($6, due_date),
    start_date = COALESCE($7, start_date),
    project_id = COALESCE($8, project_id),
    recurrence = COALESCE($9, recurrence),
    tags = COALESCE($10, tags),
    notes = COALESCE($11, notes),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at
`

type UpdateTaskParams struct {
	ID          int32              `json:"id"`
	UserID      pgtype.Int4        `json:"user_id"`
	Description string             `json:"description"`
	Status      string             `json:"status"`
	Priority    pgtype.Text        `json:"priority"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	ProjectID   pgtype.Int4        `json:"project_id"`
	Recurrence  pgtype.Text        `json:"recurrence"`
	Tags        []string           `json:"tags"`
	Notes       pgtype.Text        `json:"notes"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.UserID,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.StartDate,
		arg.ProjectID,
		arg.Recurrence,
		arg.Tags,
		arg.Notes,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET
    status = $3,
    updated_at = NOW(),
    completed_at = CASE 
        WHEN $3 = 'completed' THEN NOW() 
        ELSE completed_at 
    END
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, description, status, priority, due_date, start_date, completed_at, project_id, recurrence, tags, notes, created_at, updated_at
`

type UpdateTaskStatusParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskStatus, arg.ID, arg.UserID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.StartDate,
		&i.CompletedAt,
		&i.ProjectID,
		&i.Recurrence,
		&i.Tags,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET 
    email = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, name, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET 
    password_hash = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, password_hash, name, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
